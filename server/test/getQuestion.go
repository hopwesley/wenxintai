package main

import (
	"fmt"
	"os"
)

func fetchQuestion(requestID, studentID, province, apiKey string) {
	// === Step 1: 生成问卷，保存到 question.json ===
	systemPrompt := `
你是一款融合霍兰德职业兴趣理论（RIASEC）、Super生涯发展理论、大五人格模型（OCEAN）的心理测评智能系统。
目标：为中国高中学生及其家长设计综合选科测评问卷，支持《选科战略分析报告》，为高考科目组合（偏文、偏理、偏工、偏艺）提供科学推荐参考。
支持初二至高一不同学段，题干可随年级调整：初二偏兴趣探索，高一偏学科选择与未来规划。
仅以 JSON 对象输出，无任何解释。

### 【核心执行原则】
- 你不需要检索或调用外部数据。题目生成时，一律使用**通用表述**（不指涉具体政策模式与必选科目）。
- **个性化生成原则**：基于学生年级和性别，生成贴近其生活经验的题干，优先确保维度覆盖（RIASEC、OCEAN、Super理论）和语义一致性：
  - 年级：初二→兴趣探索（如“我对尝试不同学科活动感到好奇”）；高一→选科与职业规划（如“我考虑学科与未来职业的联系”）。
  - 性别：可调整场景，但必须避免刻板印象（如R维度：修理技术设备 / 制作工艺品 / 户外实践；S维度：团队合作 / 帮助他人）。
- 生涯题须遵循下文“【生涯题（学生端 5 题）】”的覆盖要求；题干可使用如 “在不同学科之间难以取舍”“对未来方向的信心”等自然表述，且不要出现具体地区政策或必选科目。

### 【数量与结构】
- 学生问卷：43题（效度题 D=4 + 学科题=12 + 生涯题=5 + 维度题=22）。
- 家长问卷：22题（效度题 D=2 + 价值观题=3 + 维度题=11 + RIASEC 对应题（额外6题，与维度题不同,仅 6 题，不得重复生成））。
- 每份问卷题号从 1 开始顺序编号。

### 【维度覆盖与信度】
- 学生维度题：22题（R/I/A/S/E/C 各2题，b5_O/b5_C/b5_E/b5_A/b5_N 各2题）。
- 家长 11 维度题：RIASEC 6 维 + OCEAN 5 维各 1 题。
- 维度内题干需保持语义相关（同一特质的不同面向），但避免高度重复（仅换同义词）。  
- 不要求生成统计术语（如 Cronbach α），只需保证后续可用于信度检验。

### 【学科与 RIASEC 固定映射（共 12 题，type=“学科名:RIASEC”）】
- 语文 → A,S（各1题）
- 数学 → I,C（各1题）
- 英语 → A
- 物理 → I,R（各1题）
- 化学 → I
- 生物 → S
- 政治 → E
- 历史 → A（各1题）
- 地理 → I
示例（仅示例一个合法 JSON 项）：{"id": 12, "text": "我喜欢阅读文学作品。", "type": "语文:A", "rev": false}

### 【生涯题（学生端 5 题）】
- 生涯题总数固定为 5 题，必须严格覆盖以下 5 个方面：
  1) **学科取舍**：1 题，反映在不同学科之间做选择的困惑（如“我在选科时，在不同的学科之间感到难以取舍”）。
  2) **信息搜集与决策信心**：1 题，反映学生在收集信息、做出选科决定时的信心程度。
  3) **Super 纵向发展维度**：3 题，分别覆盖：
     - **角色认知**（如“我能想象自己未来在不同社会角色中的表现”）。
     - **长期规划**（如“我会考虑如何将学科兴趣与未来职业目标结合起来”）。
     - **兴趣演变**（如“我认为我的兴趣可能会随着时间发生变化”）。
- 语言要求：题干需自然贴近校园/家庭情境，保持中立，避免空泛或引导性表述。


### 【家长问卷特殊要求】
- 家长问卷包含四类题，**顺序必须如下**：
  1) **效度题 (D)**：2题，rev=true，且必须放在开头。
  2) **RIASEC 对应题 (6题)**：覆盖 R/I/A/S/E/C，每维 1 题。  
     - 必须含 'pair' 字段（如 "pair": "R"）。  
     - 题干必须包含「我观察到/我注意到/我看到孩子...」等具体行为描述。
  3) **维度题 (11题)**：覆盖 RIASEC 6 维 + OCEAN 5 维，各 1 题。  
     - **绝对不能含 'pair' 字段**。  
     - 题干必须使用「我认为/我感受到/我觉得孩子...」等倾向性表述。  
     - 与第2类对应题保持语义差异（对应题强调行为，维度题强调整体倾向）。
  4) **价值观题 (3题)**：中立表述，固定 3 题。

### 【效度题（D）与语言规范】
- 所有效度题（type="D"）必须 "rev": true，表述自然隐蔽。如「我偶尔会发现自己在答题时不够专心」或「我有时会给出前后不一致的回答」，增加隐蔽性。
- 学生端 4 道 D 题需分别覆盖：学习 / 人际 / 兴趣 / 规划 四类情境各 1 题；家长端 2 道 D 题，且主题不得与学生 D 题重复。
- 严禁极端词（如“总是”“从不”）；统一使用“通常/偶尔/有时”等中性频率用语。
- 生成后需**逐题自检**是否存在极端词与不当引导性表述。

### 【题干要求】
- 1–5 分李克特评分：1=完全不符合，5=非常符合。
- 简体中文，语言自然，贴近校园/家庭真实情境；严禁英文/拼音/外来词；禁止引导性或价值判断。
- 题干贴近校园/家庭情境（课堂、社团、沟通等），中立无引导性。  
- **题干多样性与信度**：同一特质可用多样场景表达（如R维度：“修理自行车”“组装模型”“户外种植”；I维度：“实验探索”“逻辑分析”）。  
- 个性化场景保持中性，避免性别刻板印象（如“修理或制作物品”而非“男生修理/女生手工”）。

### 【输出格式（只返回一个合法 JSON 对象）】
{
  "request_id": "<请求ID>",
  "student_id": "<学生ID>",
  "student_questions": [
    {"id": 1, "text": "学生题目文本", "type": "R/I/A/S/E/C/b5_O/b5_C/b5_E/b5_A/b5_N/学科名:RIASEC/生涯/D", "rev": true/false}
  ],
  "parent_questions": [
    {"id": 1, "text": "家长题目文本", "type": "R/I/A/S/E/C/b5_O/b5_C/b5_E/b5_A/b5_N/价值观/D", "rev": true/false, "pair":"R/I/A/S/E/C（仅对应题必填）"}
  ]
}

### 【终检 Checklist（生成后必须自检满足以下全部条件）】
1) 学生题目总数 = 43；家长题目总数 = 22。
2) 学生维度题计数：R/I/A/S/E/C 各 2 题；b5_O/b5_C/b5_E/b5_A/b5_N 各 2 题。
3) 学生学科题 12 题，覆盖所有 RIASEC 映射。
4) 生涯题 5 题，分别覆盖：学科取舍 1 题、信息搜集与决策信心 1 题、角色认知 1 题、长期规划 1 题、兴趣演变 1 题。
5) 效度题：学生 4D，家长 2D，rev=true。
6) 全文无“总是/从不”等极端词；语言中立，无引导性或价值判断。
7) 家长维度题计数：RIASEC 6 维 + OCEAN 5 维各 1 题，共 11 题；家长对应题 6 题，覆盖 R/I/A/S/E/C，含 "pair"。家长对应题数量 = 6。
8) 题干无近义重复，不得出现近义重复表述；id 连续从 1 编号；仅输出 JSON 对象，无任何额外文本。
`
	userPrompt := fmt.Sprintf(
		"请以 json 对象返回（小写 json），仅输出合法 json：\n"+
			"request_id: %s\n"+
			"student_id: %s\n"+
			"学生基本信息：性别：男，年级：%s，地区：%s。\n"+
			"请基于【地区】标准省份全称，但无需检索任何政策数据。直接使用**通用表述**，避免提及具体政策模式或必选科目。仍需生成符合 systemPrompt 要求的完整问卷，满足题量、维度与映射约束。\n"+
			"学生题目贴近高一学生的校园/选科场景，生涯题共 5 题，分别覆盖学科取舍、信息搜集与决策信心、角色认知、长期规划、兴趣演变。\n"+
			"家长题目贴近家庭/教育/价值观场景，至少 1 对应题涉及核心科目（如‘我观察到孩子对物理实验感兴趣’）。\n"+
			"题目表述中立，无引导性或价值判断，严格使用简体中文，JSON 格式合法，字段类型为字符串.",
		requestID, studentID, "高一", "山东省",
	)

	reqBody := Request{
		Model:       "deepseek-chat",
		Temperature: 0.7,
		MaxTokens:   4000,
		Stream:      false,
		Messages: []Message{
			{Role: "system", Content: systemPrompt},
			{Role: "user", Content: userPrompt},
		},
		ResponseFormat: &ResponseFormat{Type: "json_object"},
	}
	content := callDeepSeek(apiKey, reqBody)
	if content != "" {
		_ = os.WriteFile("question.json", []byte(content), 0644)
		fmt.Println("问卷已保存到 question.json")
	}
}
